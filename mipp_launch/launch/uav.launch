<?xml version="1.0"?>
<launch>
  <arg name="uav_id"        default="0"/>
  <arg name="uav_name"      default="uav$(arg uav_id)"/>
  <arg name="ns"            default="/$(arg uav_name)"/>
  <arg name="model"         default="iris_depth_camera_$(arg uav_name)"/>
  <arg name="vehicle"       default="iris"/>

  <arg name="initial_x"     default="0"/>
  <arg name="initial_y"     default="0"/>
  <arg name="takeoff_z"     default="2.0"/>

  <arg name="fcu_ip"            default="$(eval 14540 + arg('uav_id'))"/>
  <arg name="fcu_gate"          default="$(eval 14580 + arg('uav_id'))"/>
  <arg name="fcu_url"           default="udp://:$(arg fcu_ip)@localhost:$(arg fcu_gate)"/>
  <arg name="gcs_url"           default="" />   <!-- GCS link is provided by SITL -->
  <arg name="mavlink_udp_port"  default="$(eval 14560 + arg('uav_id'))"/>
  <arg name="mavlink_tcp_port"  default="$(eval 4560 + arg('uav_id'))"/>
  <arg name="tgt_system"        default="$(eval 1 + arg('uav_id'))" />
  <arg name="tgt_component"     default="1" />

  <arg name="run_gazebo"        default="false"/>
  <arg name="run_rviz"          default="false"/>
  <arg name="world_file_name"   default="playpen" />
  <arg name="world_path"        default="$(find mipp_gazebo)/worlds/$(arg world_file_name).world" />
  <arg name="gui"               default="false"/>

  <arg name="pointcloud_topics"     default="[$(arg ns)/camera/depth/points]"/>
  <arg name="octomap_cloud_topic"   default="/octomap/points"/>
  <arg name="octomap_throttle_rate" default="1.0"/>

  <arg name="use_ground_truth"   default="true"/>

  <remap from="/mavros/companion_process/status"              to="$(arg ns)/mavros/companion_process/status" />
  <remap from="/mavros/altitude"                              to="$(arg ns)/mavros/altitude" />
  <remap from="/mavros/mission/waypoints"                     to="$(arg ns)/mavros/mission/waypoints" />
  <remap from="/mavros/obstacle/send"                         to="$(arg ns)/mavros/obstacle/send" />
  <remap from="/mavros/param/param_value"                     to="$(arg ns)/mavros/param/param_value" />
  <remap from="/mavros/setpoint_velocity/cmd_vel_unstamped"   to="$(arg ns)/mavros/setpoint_velocity/cmd_vel_unstamped" />
  <remap from="/mavros/state"                                 to="$(arg ns)/mavros/state" />
  <remap from="/mavros/trajectory/desired"                    to="$(arg ns)/mavros/trajectory/desired" />
  <remap from="/mavros/trajectory/generated"                  to="$(arg ns)/mavros/trajectory/generated" />

  <remap from="/mavros/setpoint_position/local"               to="$(arg ns)/uav_server/local_goal" />

  <remap from="/camera/depth/points"                          to="$(arg ns)/camera/depth/points" />
  <remap from="/camera/rgb/image_raw"                         to="$(arg ns)/camera/rgb/image_raw" />

  <remap from="/mavros/local_position/pose"                   to="$(arg ns)/mavros/local_position/pose" />
  <remap from="/mavros/local_position/velocity_local"         to="$(arg ns)/mavros/local_position/velocity_local" />

  <!-- <group if="$(arg use_ground_truth)">
    <remap from="/mavros/local_position/pose"                   to="$(arg ns)/ground_truth/pose" />
    <remap from="/mavros/local_position/velocity_local"         to="$(arg ns)/ground_truth/velocity_local" />
  </group>
  <group unless="$(arg use_ground_truth)">
    <remap from="/mavros/local_position/pose"                   to="$(arg ns)/mavros/local_position/pose" />
    <remap from="/mavros/local_position/velocity_local"         to="$(arg ns)/mavros/local_position/velocity_local" />
  </group>-->

  <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
  <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera_$(arg uav_name)"
        args="0.1 0 -0.1 -1.57 0 -1.57 gt_base_link_$(arg uav_name) camera_link_$(arg uav_name) 10"/>

  <param name="use_sim_time" value="true" />

  <group ns="$(arg ns)">
    <!-- Launch PX4 SITL -->
    <include file="$(find px4)/launch/px4.launch">
      <arg name="vehicle" value="$(arg vehicle)"/>
      <arg name="ID"      value="$(arg uav_id)"/>
    </include>

    <!-- Launch MavROS -->
    <include file="$(find mavros)/launch/node.launch">
      <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
      <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
      <arg name="config_yaml" value="$(find mipp_description)/resource/px4_config_$(arg uav_name).yaml" />
      <arg name="fcu_url" value="$(arg fcu_url)" />
      <arg name="gcs_url" value="$(arg gcs_url)" />
      <arg name="tgt_system" value="$(arg tgt_system)" />
      <arg name="tgt_component" value="$(arg tgt_component)" />
    </include>

    <!-- Spawn vehicle model -->
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-sdf -database $(arg model) -model $(arg vehicle)_$(arg uav_id) -x $(arg initial_x) -y $(arg initial_y) -z 0 -R 0 -P 0 -Y 0">
    </node>
    
    <!-- Launch local planner -->
    <arg name="manager"             default="local_planner_manager"/>

    <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen"/>
    <node pkg="nodelet" type="nodelet" name="local_planner_nodelet" args="load LocalPlannerNodelet $(arg manager)" output="screen">
      <param name="goal_x_param"  value="0" />
      <param name="goal_y_param"  value="0"/>
      <param name="goal_z_param"  value="$(arg takeoff_z)" />
      <param name="world_name"    value="$(find avoidance)/sim/worlds/$(arg world_file_name).yaml" />
      <rosparam param="pointcloud_topics" subst_value="True">$(arg pointcloud_topics)</rosparam>

      <param name="tf_origin"  value="odom_$(arg uav_name)" />
      <param name="tf_base_link"  value="base_link_$(arg uav_name)" />
    </node>

    <include file="$(find mipp_packages)/launch/uav_server.launch">
      <arg name="uav_id"          value="$(arg uav_id)"/>
      <arg name="uav_start_x"     value="$(arg initial_x)"/>
      <arg name="uav_start_y"     value="$(arg initial_y)"/>
      <arg name="uav_takeoff_z"   value="$(arg takeoff_z)"/>
    </include>

    <!-- Relay/republish pointcloud to common cloud for OctoMap -->
    <node name="pointcloud_throttle_$(arg uav_name)" pkg="topic_tools" type="throttle" args="messages camera/depth/points $(arg octomap_throttle_rate) $(arg octomap_cloud_topic)"/>

    <node pkg="mipp_packages" type="ground_truth_handler_node" name="ground_truth_handler" respawn="true" output="screen" if="$(arg use_ground_truth)">
      <param name="vehicle_name"                value="$(arg uav_name)" />
      <param name="publish_footprint_tf"        value="true" />
      <param name="vehicle_map_frame"           value="map" />
      <param name="vehicle_local_origin_frame"  value="gt_odom_$(arg uav_name)" />
      <param name="vehicle_footprint_frame"     value="gt_base_footprint_$(arg uav_name)" />
      <param name="vehicle_link_frame"          value="gt_base_link_$(arg uav_name)" />
      <param name="vehicle_ground_truth_topic"  value="/gazebo/ground_truth_$(arg uav_name)" />
      <param name="vehicle_pos_topic"           value="ground_truth/pose" />
      <param name="vehicle_vel_topic"           value="ground_truth/velocity_local" />
      <param name="vehicle_origin_offset_x"     value="$(arg initial_x)" />
      <param name="vehicle_origin_offset_y"     value="$(arg initial_y)" />
    </node>

    <node pkg="mipp_packages" type="octomap_clearer_node" name="octomap_clearer_node" respawn="true" output="screen">
      <param name="vehicle_name"                value="$(arg uav_name)" />
      <param name="vehicle_ground_truth_topic"  value="/gazebo/ground_truth_$(arg uav_name)" />
      <param name="vehicle_size_x"              value="1.0" />
      <param name="vehicle_size_y"              value="1.0" />
      <param name="vehicle_size_z"              value="0.5" />
    </node>
    
    <node pkg="mipp_packages" type="communication_constraint_visualizer_node" name="communication_constraint_visualizer_node" respawn="true" output="screen">
      <param name="world_frame"                 value="map" />
      <param name="vehicle_pose_topic"          value="$(arg ns)/mavros/local_position/pose" />
      <param name="base_station_odom_topic"     value="/ugv/odometry/filtered" />
      <param name="base_station_antenna_height" value="0.6" />
      <param name="communication_range"         value="10.0" />
      <param name="publish_rate"                value="10" />
      <param name="counter_ceiling"             value="5" />
      <param name="unmapped_is_occupied"        value="false" />
    </node>

  </group>

  <!-- Launch Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg run_gazebo)">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="world_name" value="$(arg world_path)" />
  </include>
  <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find local_planner)/resource/local_planner.rviz"  if="$(arg run_rviz)"/> 

  <!-- Static TF for uav odom, which is offset from "real" odom/world -->
  <arg name="pub_odom_tf"   default="true"/>
  <node pkg="tf" type="static_transform_publisher" name="tf_world_odom_$(arg uav_name)_link" args="$(arg initial_x) $(arg initial_y) 0 0 0 0  /map /odom_$(arg uav_name) 100" if="$(arg pub_odom_tf)"/>

</launch>
